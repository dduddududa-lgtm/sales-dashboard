{\rtf1\ansi\ansicpg932\cocoartf2865
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import React, \{ useState, useEffect, useMemo \} from 'react';\
import \{ TrendingUp, TrendingDown, Users, Phone, Calendar, CheckCircle, Target, AlertTriangle, Download, Save, Clock, Filter, X, Upload, Plus, Database \} from 'lucide-react';\
import \{ LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend \} from 'recharts';\
import \{ createClient \} from '@supabase/supabase-js';\
\
// Supabase \uc0\u49444 \u51221 \
const supabaseUrl = 'https://blmbcmyzwokxfxzlhwtf.supabase.co';\
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJsbWJjbXl6d29reGZ4emxod3RmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA0MTU1MDksImV4cCI6MjA3NTk5MTUwOX0.JTVTP-YAXIQBBChTExqApyjJ50ECL9svsOta82bfswg';\
const supabase = createClient(supabaseUrl, supabaseKey);\
\
const Dashboard = () => \{\
  const [mode, setMode] = useState('v1.0');\
  const [period, setPeriod] = useState(30);\
  const [showCustomPicker, setShowCustomPicker] = useState(false);\
  const [filters, setFilters] = useState(\{\
    theme: 'all',\
    channel: 'all',\
    campaign: 'all',\
    week: 'all'\
  \});\
  const [selectedMetric, setSelectedMetric] = useState(null);\
  const [showAuditLog, setShowAuditLog] = useState(false);\
  const [savedTemplates, setSavedTemplates] = useState([]);\
  const [showThresholdModal, setShowThresholdModal] = useState(false);\
  const [thresholdMode, setThresholdMode] = useState('global');\
  const [thresholds, setThresholds] = useState(\{\
    global: \{\
      ctr_min: 0.8,\
      cpl_max: 4000,\
      valid_rate_min: 60,\
      exch_rate_max: 80,\
      cvr_min: 2.0\
    \},\
    theme: \{\
      'Sansan': \{\
        ctr_min: 0.9,\
        cpl_max: 5000,\
        valid_rate_min: 65,\
        exch_rate_max: 75,\
        cvr_min: 2.2\
      \},\
      '\uc0\u12499 \u12474 \u12522 \u12540 \u12481 ': \{\
        ctr_min: 0.7,\
        cpl_max: 3500,\
        valid_rate_min: 60,\
        exch_rate_max: 80,\
        cvr_min: 1.8\
      \},\
      'SmartHR': \{\
        ctr_min: 0.85,\
        cpl_max: 4500,\
        valid_rate_min: 62,\
        exch_rate_max: 78,\
        cvr_min: 2.0\
      \}\
    \}\
  \});\
  const [selectedThemeForThreshold, setSelectedThemeForThreshold] = useState('Sansan');\
  \
  // \uc0\u48177 \u50644 \u46300  \u50672 \u46041  \u49345 \u53468 \
  const [rawData, setRawData] = useState([]);\
  const [loading, setLoading] = useState(true);\
  const [showAddDataModal, setShowAddDataModal] = useState(false);\
  const [showUploadModal, setShowUploadModal] = useState(false);\
  const [connectionStatus, setConnectionStatus] = useState('\uc0\u36899 \u32080  \u20013 ...');\
  \
  // \uc0\u45936 \u51060 \u53552  \u51077 \u47141  \u54268  \u49345 \u53468 \
  const [newData, setNewData] = useState(\{\
    date: new Date().toISOString().split('T')[0],\
    theme: 'Sansan',\
    channel: 'Meta',\
    campaign: '\uc0\u12461 \u12515 \u12531 \u12506 \u12540 \u12531 A',\
    week: 1,\
    impressions: 0,\
    clicks: 0,\
    spend: 0,\
    leads_total: 0,\
    leads_valid: 0,\
    leads_exchanged: 0,\
    pv: 0,\
    doc_req: 0,\
    warm_call: 0,\
    appt: 0,\
    won: 0,\
    sample_presented: 0,\
    sample_approved: 0,\
    delivery_total: 0,\
    delivery_on_sla: 0\
  \});\
\
  const showPaidSections = mode === 'v1.1';// \uc0\u45936 \u51060 \u53552  \u47196 \u46300 \
  useEffect(() => \{\
    loadData();\
    loadThresholds();\
    loadTemplates();\
  \}, []);\
\
  const loadData = async () => \{\
    try \{\
      setLoading(true);\
      const \{ data, error \} = await supabase\
        .from('sales_data')\
        .select('*')\
        .order('date', \{ ascending: false \});\
      \
      if (error) throw error;\
      \
      if (data && data.length > 0) \{\
        setRawData(data);\
        setConnectionStatus('\uc0\u9989  \u36899 \u32080 \u46120 ');\
      \} else \{\
        setConnectionStatus('\uc0\u9888 \u65039  \u12487 \u12540 \u12479 \u50630 \u51020 ');\
        await generateSampleData();\
      \}\
    \} catch (error) \{\
      console.error('\uc0\u45936 \u51060 \u53552  \u47196 \u46300  \u49892 \u54056 :', error);\
      setConnectionStatus('\uc0\u10060  \u36899 \u32080  \u22833 \u25943 ');\
    \} finally \{\
      setLoading(false);\
    \}\
  \};\
\
  const generateSampleData = async () => \{\
    const themes = ['Sansan', '\uc0\u12499 \u12474 \u12522 \u12540 \u12481 ', 'SmartHR'];\
    const channels = ['Meta', 'Google'];\
    const campaigns = ['\uc0\u12461 \u12515 \u12531 \u12506 \u12540 \u12531 A', '\u12461 \u12515 \u12531 \u12506 \u12540 \u12531 B', '\u12461 \u12515 \u12531 \u12506 \u12540 \u12531 C'];\
    \
    const sampleData = [];\
    \
    for (let i = 0; i < 30; i++) \{\
      const date = new Date();\
      date.setDate(date.getDate() - (29 - i));\
      \
      for (const theme of themes) \{\
        for (const channel of channels) \{\
          for (const campaign of campaigns) \{\
            sampleData.push(\{\
              date: date.toISOString().split('T')[0],\
              theme,\
              channel,\
              campaign,\
              week: Math.floor(i / 7) % 4 + 1,\
              impressions: Math.floor(Math.random() * 50000) + 10000,\
              clicks: Math.floor(Math.random() * 500) + 100,\
              spend: Math.floor(Math.random() * 100000) + 20000,\
              leads_total: Math.floor(Math.random() * 30) + 5,\
              leads_valid: Math.floor(Math.random() * 20) + 3,\
              leads_exchanged: Math.floor(Math.random() * 15) + 2,\
              pv: Math.floor(Math.random() * 400) + 80,\
              doc_req: Math.floor(Math.random() * 40) + 5,\
              warm_call: Math.floor(Math.random() * 30) + 4,\
              appt: Math.floor(Math.random() * 15) + 2,\
              won: Math.floor(Math.random() * 8) + 1,\
              sample_presented: Math.floor(Math.random() * 50) + 10,\
              sample_approved: Math.floor(Math.random() * 40) + 8,\
              delivery_total: Math.floor(Math.random() * 30) + 5,\
              delivery_on_sla: Math.floor(Math.random() * 28) + 4\
            \});\
          \}\
        \}\
      \}\
    \}\
    \
    const \{ error \} = await supabase\
      .from('sales_data')\
      .insert(sampleData);\
    \
    if (!error) \{\
      await loadData();\
    \}\
  \};\
\
  const loadThresholds = async () => \{\
    try \{\
      const \{ data, error \} = await supabase\
        .from('thresholds')\
        .select('*');\
      \
      if (error) throw error;\
      \
      if (data && data.length > 0) \{\
        const newThresholds = \{ global: \{\}, theme: \{\} \};\
        \
        data.forEach(t => \{\
          if (t.mode === 'global') \{\
            newThresholds.global = \{\
              ctr_min: t.ctr_min,\
              cpl_max: t.cpl_max,\
              valid_rate_min: t.valid_rate_min,\
              exch_rate_max: t.exch_rate_max,\
              cvr_min: t.cvr_min\
            \};\
          \} else if (t.mode === 'theme' && t.theme) \{\
            newThresholds.theme[t.theme] = \{\
              ctr_min: t.ctr_min,\
              cpl_max: t.cpl_max,\
              valid_rate_min: t.valid_rate_min,\
              exch_rate_max: t.exch_rate_max,\
              cvr_min: t.cvr_min\
            \};\
          \}\
        \});\
        \
        setThresholds(prev => (\{ ...prev, ...newThresholds \}));\
      \}\
    \} catch (error) \{\
      console.error('\uc0\u51076 \u44228 \u44050  \u47196 \u46300  \u49892 \u54056 :', error);\
    \}\
  \};\
\
  const loadTemplates = async () => \{\
    try \{\
      const \{ data, error \} = await supabase\
        .from('templates')\
        .select('*')\
        .order('created_at', \{ ascending: false \});\
      \
      if (error) throw error;\
      \
      if (data) \{\
        setSavedTemplates(data.map(t => (\{\
          ...t,\
          timestamp: t.created_at\
        \})));\
      \}\
    \} catch (error) \{\
      console.error('\uc0\u53596 \u54540 \u47551  \u47196 \u46300  \u49892 \u54056 :', error);\
    \}\
  \};\
\
  const getColorCode = (color) => \{\
    const colors = \{\
      blue: '#3b82f6',\
      green: '#10b981',\
      orange: '#f59e0b',\
      red: '#ef4444',\
      purple: '#8b5cf6',\
      indigo: '#6366f1',\
      teal: '#14b8a6'\
    \};\
    return colors[color] || '#3b82f6';\
  \};\
\
  const fmtN = (n) => Number.isFinite(n) ? Math.round(n).toLocaleString() : '\'96';\
  const fmtP = (n, d = 1) => Number.isFinite(n) ? `$\{n.toFixed(d)\}%` : 'N/A';\
  \
  const toNum = (v, fallback) => \{\
    const n = parseFloat(v);\
    return Number.isFinite(n) && n >= 0 ? n : fallback;\
  \};const filteredData = useMemo(() => \{\
    const endDate = new Date();\
    endDate.setHours(23, 59, 59, 999);\
    const startDate = new Date();\
    startDate.setDate(startDate.getDate() - (period - 1));\
    startDate.setHours(0, 0, 0, 0);\
\
    return rawData.filter(d => \{\
      const itemDate = new Date(d.date);\
      const inPeriod = itemDate >= startDate && itemDate <= endDate;\
      const matchTheme = filters.theme === 'all' || d.theme === filters.theme;\
      const matchChannel = filters.channel === 'all' || d.channel === filters.channel;\
      const matchCampaign = filters.campaign === 'all' || d.campaign === filters.campaign;\
      const matchWeek = filters.week === 'all' || d.week === parseInt(filters.week);\
      \
      return inPeriod && matchTheme && matchChannel && matchCampaign && matchWeek;\
    \});\
  \}, [rawData, period, filters]);\
\
  const previousPeriodData = useMemo(() => \{\
    const endDate = new Date();\
    endDate.setDate(endDate.getDate() - period);\
    endDate.setHours(23, 59, 59, 999);\
    const startDate = new Date();\
    startDate.setDate(startDate.getDate() - (period * 2) + 1);\
    startDate.setHours(0, 0, 0, 0);\
\
    return rawData.filter(d => \{\
      const itemDate = new Date(d.date);\
      const inPeriod = itemDate >= startDate && itemDate <= endDate;\
      const matchTheme = filters.theme === 'all' || d.theme === filters.theme;\
      const matchChannel = filters.channel === 'all' || d.channel === filters.channel;\
      const matchCampaign = filters.campaign === 'all' || d.campaign === filters.campaign;\
      const matchWeek = filters.week === 'all' || d.week === parseInt(filters.week);\
      return inPeriod && matchTheme && matchChannel && matchCampaign && matchWeek;\
    \});\
  \}, [rawData, period, filters]);\
\
  const calculateMetrics = (data) => \{\
    const totals = data.reduce((acc, d) => (\{\
      impressions: acc.impressions + (d.impressions || 0),\
      clicks: acc.clicks + (d.clicks || 0),\
      spend: acc.spend + (d.spend || 0),\
      leads_total: acc.leads_total + (d.leads_total || 0),\
      leads_valid: acc.leads_valid + (d.leads_valid || 0),\
      leads_exchanged: acc.leads_exchanged + (d.leads_exchanged || 0),\
      pv: acc.pv + (d.pv || 0),\
      doc_req: acc.doc_req + (d.doc_req || 0),\
      warm_call: acc.warm_call + (d.warm_call || 0),\
      appt: acc.appt + (d.appt || 0),\
      won: acc.won + (d.won || 0),\
      sample_presented: acc.sample_presented + (d.sample_presented || 0),\
      sample_approved: acc.sample_approved + (d.sample_approved || 0),\
      delivery_total: acc.delivery_total + (d.delivery_total || 0),\
      delivery_on_sla: acc.delivery_on_sla + (d.delivery_on_sla || 0)\
    \}), \{\
      impressions: 0, clicks: 0, spend: 0, leads_total: 0, leads_valid: 0,\
      leads_exchanged: 0, pv: 0, doc_req: 0, warm_call: 0, appt: 0, won: 0,\
      sample_presented: 0, sample_approved: 0, delivery_total: 0, delivery_on_sla: 0\
    \});\
\
    const target = totals.impressions / 100;\
    \
    return \{\
      target: Math.round(target),\
      pv: totals.pv,\
      doc_req: totals.doc_req,\
      warm_call: totals.warm_call,\
      appt: totals.appt,\
      won: totals.won,\
      ctr: totals.impressions > 0 ? (totals.clicks / totals.impressions) * 100 : 0,\
      cpc: totals.clicks > 0 ? totals.spend / totals.clicks : 0,\
      cpm: totals.impressions > 0 ? (totals.spend / totals.impressions) * 1000 : 0,\
      cvr: totals.clicks > 0 ? (totals.leads_total / totals.clicks) * 100 : 0,\
      cpl: totals.leads_total > 0 ? totals.spend / totals.leads_total : 0,\
      pv_reach: target > 0 ? (totals.pv / target) * 100 : 0,\
      doc_reach: target > 0 ? (totals.doc_req / target) * 100 : 0,\
      warm_reach: target > 0 ? (totals.warm_call / target) * 100 : 0,\
      appt_reach: target > 0 ? (totals.appt / target) * 100 : 0,\
      won_reach: target > 0 ? (totals.won / target) * 100 : 0,\
      pv_to_doc: totals.pv > 0 ? (totals.doc_req / totals.pv) * 100 : 0,\
      doc_to_warm: totals.doc_req > 0 ? (totals.warm_call / totals.doc_req) * 100 : 0,\
      warm_to_appt: totals.warm_call > 0 ? (totals.appt / totals.warm_call) * 100 : 0,\
      appt_to_won: totals.appt > 0 ? (totals.won / totals.appt) * 100 : 0,\
      sample_approval: totals.sample_presented > 0 ? (totals.sample_approved / totals.sample_presented) * 100 : 0,\
      sla_compliance: totals.delivery_total > 0 ? (totals.delivery_on_sla / totals.delivery_total) * 100 : 0,\
      valid_rate: totals.delivery_total > 0 ? (totals.leads_valid / totals.delivery_total) * 100 : 0,\
      exchange_rate: totals.delivery_total > 0 ? (totals.leads_exchanged / totals.delivery_total) * 100 : 0,\
      ...totals\
    \};\
  \};\
\
  const currentMetrics = useMemo(() => calculateMetrics(filteredData), [filteredData]);\
  const previousMetrics = useMemo(() => calculateMetrics(previousPeriodData), [previousPeriodData]);\
\
  const calculateChange = (current, previous) => \{\
    if (!isFinite(previous) || previous === 0) return NaN;\
    return ((current - previous) / previous) * 100;\
  \};\
\
  const getActiveThresholds = () => \{\
    if (thresholdMode === 'theme' && filters.theme !== 'all') \{\
      return thresholds.theme[filters.theme] || thresholds.global;\
    \}\
    return thresholds.global;\
  \};\
\
  const detectAnomalies = () => \{\
    const anomalies = [];\
    const activeThresholds = getActiveThresholds();\
    \
    if (currentMetrics.ctr < activeThresholds.ctr_min) \{\
      anomalies.push(\{ type: 'CTR', value: currentMetrics.ctr, threshold: activeThresholds.ctr_min, status: 'low', unit: '%' \});\
    \}\
    if (currentMetrics.cpl > activeThresholds.cpl_max) \{\
      anomalies.push(\{ type: 'CPL', value: currentMetrics.cpl, threshold: activeThresholds.cpl_max, status: 'high', unit: '\uc0\u20870 ' \});\
    \}\
    if (currentMetrics.valid_rate < activeThresholds.valid_rate_min) \{\
      anomalies.push(\{ type: '\uc0\u26377 \u21177 \u29575 ', value: currentMetrics.valid_rate, threshold: activeThresholds.valid_rate_min, status: 'low', unit: '%' \});\
    \}\
    if (currentMetrics.cvr < activeThresholds.cvr_min) \{\
      anomalies.push(\{ type: 'CVR', value: currentMetrics.cvr, threshold: activeThresholds.cvr_min, status: 'low', unit: '%' \});\
    \}\
    if (currentMetrics.exchange_rate > activeThresholds.exch_rate_max) \{\
      anomalies.push(\{ type: '\uc0\u20132 \u25563 \u29575 ', value: currentMetrics.exchange_rate, threshold: activeThresholds.exch_rate_max, status: 'high', unit: '%' \});\
    \}\
    return anomalies;\
  \};\
\
  const anomalies = detectAnomalies();\
\
  const findBottleneck = () => \{\
    const rates = [\
      \{ name: 'PV\uc0\u8594 \u36039 \u26009 \u35531 \u27714 ', rate: currentMetrics.pv_to_doc, hint: '\u12467 \u12500 \u12540 \u12398 \u35211 \u30452 \u12375 \u12414 \u12383 \u12399 CTA\u12398 \u24375 \u21270 \u12434 \u26908 \u35342 ' \},\
      \{ name: '\uc0\u36039 \u26009 \u35531 \u27714 \u8594 \u12454 \u12457 \u12540 \u12512 \u12467 \u12540 \u12523 ', rate: currentMetrics.doc_to_warm, hint: '\u12522 \u12540 \u12489 \u21697 \u36074 \u12398 \u31934 \u26619 \u12414 \u12383 \u12399 \u12501 \u12457 \u12525 \u12540 \u12473 \u12500 \u12540 \u12489 \u25913 \u21892 ' \},\
      \{ name: '\uc0\u12454 \u12457 \u12540 \u12512 \u12467 \u12540 \u12523 \u8594 \u12450 \u12509 ', rate: currentMetrics.warm_to_appt, hint: '\u12488 \u12540 \u12463 \u12473 \u12463 \u12522 \u12503 \u12488 \u25913 \u21892 \u12414 \u12383 \u12399 \u12475 \u12464 \u12513 \u12531 \u12488 \u32302 \u23567 ' \},\
      \{ name: '\uc0\u12450 \u12509 \u8594 \u21463 \u27880 ', rate: currentMetrics.appt_to_won, hint: '\u25552 \u26696 \u20869 \u23481 \u12398 \u35211 \u30452 \u12375 \u12414 \u12383 \u12399 \u20385 \u26684 \u35373 \u23450 \u12398 \u20877 \u26908 \u35342 ' \}\
    ];\
    return rates.reduce((min, r) => r.rate < min.rate ? r : min, rates[0]);\
  \};\
\
  const bottleneck = findBottleneck();const saveThresholds = async () => \{\
    try \{\
      const \{ error: globalError \} = await supabase\
        .from('thresholds')\
        .upsert(\{\
          mode: 'global',\
          theme: null,\
          ...thresholds.global,\
          updated_at: new Date().toISOString()\
        \}, \{\
          onConflict: 'mode,theme'\
        \});\
      \
      if (globalError) throw globalError;\
      \
      if (thresholdMode === 'theme') \{\
        const \{ error: themeError \} = await supabase\
          .from('thresholds')\
          .upsert(\{\
            mode: 'theme',\
            theme: selectedThemeForThreshold,\
            ...thresholds.theme[selectedThemeForThreshold],\
            updated_at: new Date().toISOString()\
          \}, \{\
            onConflict: 'mode,theme'\
          \});\
        \
        if (themeError) throw themeError;\
      \}\
      \
      alert('\uc0\u38334 \u20516 \u12364 \u20445 \u23384 \u12373 \u12428 \u12414 \u12375 \u12383 ');\
    \} catch (error) \{\
      console.error('\uc0\u20445 \u23384 \u22833 \u25943 :', error);\
      alert('\uc0\u20445 \u23384 \u22833 \u25943 : ' + error.message);\
    \}\
  \};\
\
  const saveTemplate = async () => \{\
    try \{\
      const template = \{\
        name: `\uc0\u12486 \u12531 \u12503 \u12524 \u12540 \u12488 _$\{new Date().toISOString()\}`,\
        filters,\
        period\
      \};\
      \
      const \{ error \} = await supabase\
        .from('templates')\
        .insert([template]);\
      \
      if (error) throw error;\
      \
      await loadTemplates();\
      alert('\uc0\u12486 \u12531 \u12503 \u12524 \u12540 \u12488 \u12434 \u20445 \u23384 \u12375 \u12414 \u12375 \u12383 ');\
    \} catch (error) \{\
      console.error('\uc0\u20445 \u23384 \u22833 \u25943 :', error);\
      alert('\uc0\u20445 \u23384 \u22833 \u25943 : ' + error.message);\
    \}\
  \};\
\
  const applyTemplate = (template) => \{\
    setFilters(template.filters);\
    setPeriod(template.period);\
  \};\
\
  const deleteTemplate = async (id) => \{\
    if (window.confirm('\uc0\u12371 \u12398 \u12486 \u12531 \u12503 \u12524 \u12540 \u12488 \u12434 \u21066 \u38500 \u12375 \u12414 \u12377 \u12363 \u65311 ')) \{\
      try \{\
        const \{ error \} = await supabase\
          .from('templates')\
          .delete()\
          .eq('id', id);\
        \
        if (error) throw error;\
        \
        await loadTemplates();\
      \} catch (error) \{\
        console.error('\uc0\u21066 \u38500 \u22833 \u25943 :', error);\
        alert('\uc0\u21066 \u38500 \u22833 \u25943 : ' + error.message);\
      \}\
    \}\
  \};\
\
  const addData = async () => \{\
    try \{\
      const \{ error \} = await supabase\
        .from('sales_data')\
        .insert([newData]);\
      \
      if (error) throw error;\
      \
      await loadData();\
      setShowAddDataModal(false);\
      \
      setNewData(\{\
        date: new Date().toISOString().split('T')[0],\
        theme: 'Sansan',\
        channel: 'Meta',\
        campaign: '\uc0\u12461 \u12515 \u12531 \u12506 \u12540 \u12531 A',\
        week: 1,\
        impressions: 0,\
        clicks: 0,\
        spend: 0,\
        leads_total: 0,\
        leads_valid: 0,\
        leads_exchanged: 0,\
        pv: 0,\
        doc_req: 0,\
        warm_call: 0,\
        appt: 0,\
        won: 0,\
        sample_presented: 0,\
        sample_approved: 0,\
        delivery_total: 0,\
        delivery_on_sla: 0\
      \});\
      \
      alert('\uc0\u12487 \u12540 \u12479 \u12434 \u36861 \u21152 \u12375 \u12414 \u12375 \u12383 ');\
    \} catch (error) \{\
      console.error('\uc0\u36861 \u21152 \u22833 \u25943 :', error);\
      alert('\uc0\u36861 \u21152 \u22833 \u25943 : ' + error.message);\
    \}\
  \};\
\
  const handleCSVUpload = async (event) => \{\
    const file = event.target.files[0];\
    if (!file) return;\
    \
    try \{\
      const text = await file.text();\
      const lines = text.split('\\n');\
      const headers = lines[0].split(',').map(h => h.trim());\
      \
      const csvData = [];\
      \
      for (let i = 1; i < lines.length; i++) \{\
        if (!lines[i].trim()) continue;\
        \
        const values = lines[i].split(',');\
        const row = \{\};\
        \
        headers.forEach((header, index) => \{\
          const value = values[index]?.trim();\
          \
          if (['impressions', 'clicks', 'spend', 'leads_total', 'leads_valid', \
               'leads_exchanged', 'pv', 'doc_req', 'warm_call', 'appt', 'won',\
               'sample_presented', 'sample_approved', 'delivery_total', \
               'delivery_on_sla', 'week'].includes(header)) \{\
            row[header] = parseFloat(value) || 0;\
          \} else \{\
            row[header] = value;\
          \}\
        \});\
        \
        csvData.push(row);\
      \}\
      \
      if (csvData.length === 0) \{\
        alert('CSV\uc0\u12501 \u12449 \u12452 \u12523 \u12395 \u12487 \u12540 \u12479 \u12364 \u12354 \u12426 \u12414 \u12379 \u12435 ');\
        return;\
      \}\
      \
      const \{ error \} = await supabase\
        .from('sales_data')\
        .insert(csvData);\
      \
      if (error) throw error;\
      \
      await loadData();\
      setShowUploadModal(false);\
      alert(`$\{csvData.length\}\uc0\u20214 \u12398 \u12487 \u12540 \u12479 \u12434 \u12450 \u12483 \u12503 \u12525 \u12540 \u12489 \u12375 \u12414 \u12375 \u12383 `);\
    \} catch (error) \{\
      console.error('\uc0\u12450 \u12483 \u12503 \u12525 \u12540 \u12489 \u22833 \u25943 :', error);\
      alert('\uc0\u12450 \u12483 \u12503 \u12525 \u12540 \u12489 \u22833 \u25943 : ' + error.message);\
    \}\
  \};\
\
  const downloadSampleCSV = () => \{\
    const sample = `date,theme,channel,campaign,week,impressions,clicks,spend,leads_total,leads_valid,leads_exchanged,pv,doc_req,warm_call,appt,won,sample_presented,sample_approved,delivery_total,delivery_on_sla\
2024-01-01,Sansan,Meta,\uc0\u12461 \u12515 \u12531 \u12506 \u12540 \u12531 A,1,30000,300,50000,15,10,8,200,20,15,10,5,30,25,15,14\
2024-01-02,\uc0\u12499 \u12474 \u12522 \u12540 \u12481 ,Google,\u12461 \u12515 \u12531 \u12506 \u12540 \u12531 B,1,25000,250,40000,12,8,6,180,18,12,8,4,25,20,12,11`;\
    \
    const blob = new Blob([sample], \{ type: 'text/csv' \});\
    const url = URL.createObjectURL(blob);\
    const a = document.createElement('a');\
    a.href = url;\
    a.download = 'sample_data.csv';\
    a.click();\
    URL.revokeObjectURL(url);\
  \};\
\
  const exportToCSV = () => \{\
    const headers = ['\uc0\u25351 \u27161 ', '\u20516 ', '\u21069 \u26399 \u27604 ', '\u20998 \u23376 ', '\u20998 \u27597 '];\
    const meta = [`\uc0\u12514 \u12540 \u12489 :$\{mode\}`, `\u26399 \u38291 :\u36942 \u21435 $\{period\}\u26085 `, `\u29983 \u25104 :$\{new Date().toISOString()\}`];\
    const rows = metricsCards\
      .filter(m => showPaidSections || !m.hideInV1)\
      .map(m => [\
        m.label,\
        m.value,\
        isNaN(m.change) ? 'N/A' : m.change.toFixed(1) + '%',\
        m.numerator ?? '-',\
        m.denominator ?? '-'\
      ]);\
    \
    const csv = [meta.join(' / '), '', headers.join(','), ...rows.map(row => row.join(','))].join('\\n');\
    const blob = new Blob([csv], \{ type: 'text/csv' \});\
    const url = URL.createObjectURL(blob);\
    const a = document.createElement('a');\
    a.href = url;\
    a.download = `\uc0\u21942 \u26989 \u12458 \u12540 \u12465 \u12473 \u12488 \u12524 \u12540 \u12471 \u12519 \u12531 _$\{new Date().toISOString().split('T')[0]\}.csv`;\
    a.click();\
    URL.revokeObjectURL(url);\
  \};\
\
  const CustomTooltip = (\{ active, payload \}) => \{\
    if (active && payload && payload.length) \{\
      return (\
        <div className="bg-white p-3 border border-gray-300 rounded shadow-lg">\
          \{payload.map((entry, index) => (\
            <p key=\{index\} style=\{\{ color: entry.color \}\} className="text-sm font-semibold">\
              \{entry.name\}: \{fmtN(entry.value)\}\
            </p>\
          ))\}\
          <p className="mt-2 text-[11px] text-gray-500 border-t border-gray-200 pt-1">\
            \uc0\u27604 \u36611 : \u29694 \u22312 \u26399 \u38291 \u65288 \u36942 \u21435 \{period\}\u26085 \u65289 vs \u21069 \u21516 \u26399 \u38291 \
          </p>\
        </div>\
      );\
    \}\
    return null;\
  \};\
\
  const activeThresholds = getActiveThresholds();const metricsCards = useMemo(() => [\
    \{\
      id: 'sample_approval',\
      label: mode === 'v1.0' ? '\uc0\u20869 \u37096 \u26377 \u21177 \u29575 \u65288 QA\u65289 ' : '\u12469 \u12531 \u12503 \u12523 \u25215 \u35469 \u29575 ',\
      value: currentMetrics.sample_approval.toFixed(1) + '%',\
      numerator: currentMetrics.sample_approved,\
      denominator: currentMetrics.sample_presented,\
      change: calculateChange(currentMetrics.sample_approval, previousMetrics.sample_approval),\
      color: 'indigo',\
      icon: CheckCircle\
    \},\
    \{\
      id: 'sla_compliance',\
      label: mode === 'v1.0' ? '\uc0\u12522 \u12540 \u12489 \u25972 \u20633 SLA\u36981 \u23432 \u29575 ' : '\u32013 \u21697 SLA\u36981 \u23432 \u29575 ',\
      value: currentMetrics.sla_compliance.toFixed(1) + '%',\
      numerator: currentMetrics.delivery_on_sla,\
      denominator: currentMetrics.delivery_total,\
      change: calculateChange(currentMetrics.sla_compliance, previousMetrics.sla_compliance),\
      color: 'teal',\
      icon: Clock\
    \},\
    \{\
      id: 'target',\
      label: '\uc0\u25512 \u23450 \u12479 \u12540 \u12466 \u12483 \u12488 \u25968 ',\
      value: currentMetrics.target.toLocaleString(),\
      reach: 100,\
      change: calculateChange(currentMetrics.target, previousMetrics.target),\
      color: 'blue',\
      icon: Target\
    \},\
    \{\
      id: 'pv',\
      label: 'PV\uc0\u25968 ',\
      value: currentMetrics.pv.toLocaleString(),\
      reach: currentMetrics.pv_reach,\
      change: calculateChange(currentMetrics.pv, previousMetrics.pv),\
      color: 'blue',\
      icon: Users\
    \},\
    \{\
      id: 'doc_req',\
      label: '\uc0\u36039 \u26009 \u35531 \u27714 \u25968 ',\
      value: currentMetrics.doc_req.toLocaleString(),\
      reach: currentMetrics.doc_reach,\
      change: calculateChange(currentMetrics.doc_req, previousMetrics.doc_req),\
      color: 'green',\
      icon: Calendar\
    \},\
    \{\
      id: 'warm_call',\
      label: '\uc0\u12454 \u12457 \u12540 \u12512 \u12467 \u12540 \u12523 \u25968 ',\
      value: currentMetrics.warm_call.toLocaleString(),\
      reach: currentMetrics.warm_reach,\
      change: calculateChange(currentMetrics.warm_call, previousMetrics.warm_call),\
      color: 'orange',\
      icon: Phone\
    \},\
    \{\
      id: 'appt',\
      label: '\uc0\u12450 \u12509 \u25968 ',\
      value: currentMetrics.appt.toLocaleString(),\
      reach: currentMetrics.appt_reach,\
      change: calculateChange(currentMetrics.appt, previousMetrics.appt),\
      color: 'red',\
      icon: CheckCircle,\
      hideInV1: true\
    \},\
    \{\
      id: 'won',\
      label: '\uc0\u21463 \u27880 ',\
      value: currentMetrics.won.toLocaleString(),\
      reach: currentMetrics.won_reach,\
      change: calculateChange(currentMetrics.won, previousMetrics.won),\
      color: 'purple',\
      icon: CheckCircle,\
      hideInV1: true\
    \}\
  ], [currentMetrics, previousMetrics, mode]);\
\
  const conversionRates = useMemo(() => [\
    \{\
      label: '\uc0\u12479 \u12540 \u12466 \u12483 \u12488 \u8594 PV',\
      rate: currentMetrics.pv_reach.toFixed(1) + '%',\
      numerator: currentMetrics.pv,\
      denominator: currentMetrics.target,\
      change: calculateChange(currentMetrics.pv_reach, previousMetrics.pv_reach),\
      isBottleneck: false\
    \},\
    \{\
      label: 'PV\uc0\u8594 \u36039 \u26009 \u35531 \u27714 ',\
      rate: currentMetrics.pv_to_doc.toFixed(1) + '%',\
      numerator: currentMetrics.doc_req,\
      denominator: currentMetrics.pv,\
      change: calculateChange(currentMetrics.pv_to_doc, previousMetrics.pv_to_doc),\
      isBottleneck: bottleneck.name === 'PV\uc0\u8594 \u36039 \u26009 \u35531 \u27714 '\
    \},\
    \{\
      label: '\uc0\u36039 \u26009 \u35531 \u27714 \u8594 \u12454 \u12457 \u12540 \u12512 \u12467 \u12540 \u12523 ',\
      rate: currentMetrics.doc_to_warm.toFixed(1) + '%',\
      numerator: currentMetrics.warm_call,\
      denominator: currentMetrics.doc_req,\
      change: calculateChange(currentMetrics.doc_to_warm, previousMetrics.doc_to_warm),\
      isBottleneck: bottleneck.name === '\uc0\u36039 \u26009 \u35531 \u27714 \u8594 \u12454 \u12457 \u12540 \u12512 \u12467 \u12540 \u12523 '\
    \},\
    \{\
      label: '\uc0\u12454 \u12457 \u12540 \u12512 \u12467 \u12540 \u12523 \u8594 \u12450 \u12509 ',\
      rate: currentMetrics.warm_to_appt.toFixed(1) + '%',\
      numerator: currentMetrics.appt,\
      denominator: currentMetrics.warm_call,\
      change: calculateChange(currentMetrics.warm_to_appt, previousMetrics.warm_to_appt),\
      isBottleneck: bottleneck.name === '\uc0\u12454 \u12457 \u12540 \u12512 \u12467 \u12540 \u12523 \u8594 \u12450 \u12509 ',\
      hideInV1: true\
    \},\
    \{\
      label: '\uc0\u12450 \u12509 \u8594 \u21463 \u27880 ',\
      rate: currentMetrics.appt_to_won.toFixed(1) + '%',\
      numerator: currentMetrics.won,\
      denominator: currentMetrics.appt,\
      change: calculateChange(currentMetrics.appt_to_won, previousMetrics.appt_to_won),\
      isBottleneck: bottleneck.name === '\uc0\u12450 \u12509 \u8594 \u21463 \u27880 ',\
      hideInV1: true\
    \}\
  ], [currentMetrics, previousMetrics, bottleneck]);\
\
  const visibleConversionRates = useMemo(\
    () => showPaidSections ? conversionRates : conversionRates.filter(r => !r.hideInV1),\
    [conversionRates, showPaidSections]\
  );\
\
  const trendData = useMemo(() => \{\
    const dailyData = \{\};\
    filteredData.forEach(d => \{\
      if (!dailyData[d.date]) \{\
        dailyData[d.date] = \{\
          date: d.date,\
          target: 0, pv: 0, doc_req: 0, warm_call: 0, appt: 0, won: 0\
        \};\
      \}\
      dailyData[d.date].target += (d.impressions || 0) / 100;\
      dailyData[d.date].pv += d.pv || 0;\
      dailyData[d.date].doc_req += d.doc_req || 0;\
      dailyData[d.date].warm_call += d.warm_call || 0;\
      dailyData[d.date].appt += d.appt || 0;\
      dailyData[d.date].won += d.won || 0;\
    \});\
    return Object.values(dailyData).sort((a, b) => new Date(a.date) - new Date(b.date));\
  \}, [filteredData]);\
\
  if (loading) \{\
    return (\
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">\
        <div className="text-center">\
          <Database className="w-16 h-16 text-blue-500 animate-pulse mx-auto mb-4" />\
          <p className="text-lg text-gray-600">\uc0\u12487 \u12540 \u12479 \u12434 \u35501 \u12415 \u36796 \u12415 \u20013 ...</p>\
        </div>\
      </div>\
    );\
  \}\
\
  return (\
    <div className="min-h-screen bg-gray-50 p-6">\
      <div className="max-w-7xl mx-auto">\
        <div className="mb-6">\
          <div className="flex justify-between items-start mb-4">\
            <div>\
              <div className="flex items-center gap-3 mb-2">\
                <h1 className="text-3xl font-bold text-gray-900">\uc0\u21942 \u26989 \u12458 \u12540 \u12465 \u12473 \u12488 \u12524 \u12540 \u12471 \u12519 \u12531 </h1>\
                <span className=\{`px-3 py-1 rounded-full text-xs font-semibold $\{\
                  mode === 'v1.0' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'\
                \}`\}>\
                  \{mode === 'v1.0' ? 'v1.0' : 'v1.1'\}\
                </span>\
                <span className="px-3 py-1 rounded-full text-xs font-semibold bg-green-100 text-green-800">\
                  \{connectionStatus\}\
                </span>\
              </div>\
            </div>\
            <div className="flex gap-2 flex-wrap">\
              <button \
                onClick=\{() => setShowAddDataModal(true)\}\
                className="px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 text-sm"\
              >\
                <Plus className="w-4 h-4" />\
                \uc0\u12487 \u12540 \u12479 \u36861 \u21152 \
              </button>\
              <button \
                onClick=\{() => setShowUploadModal(true)\}\
                className="px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center gap-2 text-sm"\
              >\
                <Upload className="w-4 h-4" />\
                CSV\
              </button>\
            </div>\
          </div>\
        </div>\
        \
        <div className="text-center py-8">\
          <p className="text-gray-600">\uc0\u12480 \u12483 \u12471 \u12517 \u12508 \u12540 \u12489 \u12398 \u27531 \u12426 \u12398 \u37096 \u20998 \u12399 \u12371 \u12371 \u12395 \u34920 \u31034 \u12373 \u12428 \u12414 \u12377 </p>\
          <p className="text-sm text-gray-500 mt-2">\uc0\u12487 \u12540 \u12479 \u36861 \u21152 \u12392 CSV\u12450 \u12483 \u12503 \u12525 \u12540 \u12489 \u12508 \u12479 \u12531 \u12364 \u27231 \u33021 \u12375 \u12414 \u12377 </p>\
        </div>\
      </div>\
    </div>\
  );\
\};\
\
export default Dashboard;}